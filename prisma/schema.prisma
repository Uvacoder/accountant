// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map(name: "updated_at")

  Currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId Int?
  Address    Address?  @relation(fields: [addressId], references: [id])
  addressId  Int?
  @@map(name: "users")
}

model Settings {
  id        String   @id @default(cuid())
  currency  Currency @relation(fields: [currencyCode], references: [code])
  address   Address  @relation(fields: [addressId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map(name: "updated_at")

  currencyCode String
  addressId    Int
  @@map(name: "settings")
}

model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model Currency {
  id     Int    @id @default(autoincrement())
  name   String @unique
  code   String @unique
  symbol String @unique

  Invoice     Invoice[]
  User        User[]
  Settings    Settings[]
  Customer    Customer[]
  InvoiceItem InvoiceItem[]
  @@map(name: "currencies")
}

model Address {
  id        Int        @id @default(autoincrement())
  line1     String     @map(name: "line_1")
  line2     String?    @map(name: "line_2")
  city      String
  state     String
  pin       String
  country   String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  Customer  Customer[]
  User      User[]
  Settings  Settings[]
}

model Customer {
  id           Int      @id @default(autoincrement())
  name         String
  email        String?  @unique
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @map("updated_at")
  phone        String?  @unique
  notes        String?
  address      Address  @relation(fields: [addressId], references: [id])
  currency     Currency @relation(fields: [currencyCode], references: [code])
  currencyCode String   @map(name: "currency_code")
  vatin        String?
  gstin        String?
  logo         String?

  Invoice   Invoice[]
  addressId Int       @map("address_id")
  @@map(name: "customers")
}

model Tax {
  id           Int           @id @default(autoincrement())
  name         String
  value        Float
  type         TaxType
  description  String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @map("updated_at")
  invoices     Invoice[]
  invoiceItems InvoiceItem[]

  @@map(name: "taxes")
}

enum TaxType {
  percentage
  fixed
}

model InvoiceItem {
  id           Int      @id @default(autoincrement())
  description  String?
  quantity     Int
  unitPrice    Float    @map("unit_price")
  name         String
  currency     Currency @relation(fields: [currencyCode], references: [code])
  currencyCode String   @map("currency_code")
  taxes        Tax[]
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @map("updated_at")

  @@map(name: "invoice_items")
}

model Invoice {
  id            Int           @id @default(autoincrement())
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    Int           @map("customer_id")
  invoiceNumber Int           @unique @map("invoice_number")
  issueDate     DateTime      @map("issue_date")
  dueDate       DateTime      @map("due_date")
  currency      Currency      @relation(fields: [currencyCode], references: [code])
  currencyCode  String        @map("currency_code")
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @map("updated_at")
  total         Float
  status        InvoiceStatus
  taxes         Tax[]
  items         Json

  @@map(name: "invoices")
}

enum InvoiceStatus {
  draft
  issued
  paid
  cancelled
}
